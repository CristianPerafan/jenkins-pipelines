pipeline {
    agent any
    environment {
        IMAGE_NAME = 'outcome-curr-mgmnt-backend-image'         
        CONTAINER_NAME = 'outcome-curr-mgmnt-backend-container'  
    }
    stages {
        stage('Checkout') {
            agent { label 'build-node' }
            steps {
                git url: 'https://github.com/CristianPerafan/outcome-curr-mgmnt-backend.git', 
                    branch: 'main',
                    credentialsId: 'github-credentials'
            }
        }
        stage('Build') {
            agent { label 'build-node' }
            steps {
                script {
                    bat " mvn clean install -DskipTests"
                }
            }
        }
        stage('Dockerize App') {
            agent { label 'build-node' } 
            steps {
                script {
                    // Construir la imagen de Docker
                    bat "docker build -t ${IMAGE_NAME} ."
                    bat "docker run --name ${CONTAINER_NAME} -d -p 9092:9092 ${IMAGE_NAME}"

                }
            }
        }
        stage('Smoke test') {
            agent { label 'build-node' }
            steps {
                script {
                    sleep time: 20, unit: 'SECONDS'
                    bat "mvn -pl outcome-curr-mgmt-system-tests -Dtest=PerfLvlControllerSmokeIT test"
                    bat "mvn -pl outcome-curr-mgmt-system-tests -Dtest=AcademicPeriodControllerSmokeIT test"
                }
            }
        }
        stage('Test and Generate Report') {
            agent { label 'build-node' }
            steps {
                script {
                    bat "mvn clean verify"
                }
            }
        }
        stage('JaCoCo Report') {
            steps {
                jacoco(
                    execPattern: '**/jacoco.exec',
                    classPattern: '**/classes',
                    sourcePattern: '**/src/main/java',
                )
            }
        }
        stage('Cleanup') {
            agent { label 'build-node' }
            steps {
                script {
                    bat "docker stop ${CONTAINER_NAME} || exit 0"
                    bat "docker rm ${CONTAINER_NAME} || exit 0"
                    bat "docker rmi ${IMAGE_NAME} || exit 0"
                }
            }
        }
    }
}
